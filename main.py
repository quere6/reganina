from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from telegram import Update
import json
import time

USERS_FILE = 'users.json'
GUILDS_FILE = 'guilds.json'

MAX_ENERGY = 100
FEED_COINS_BASE = 25
XP_PER_FEED = 10
GUILD_CREATION_COST = 1000
MAX_GUILD_MEMBERS = 20

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ñ–∞–π–ª–∞–º–∏ (–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è/–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è)
def load_data(filename):
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_data(filename, data):
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def update_energy(user):
    now = time.time()
    elapsed = now - user.get('energy_last_update', now)
    energy_gain = int(elapsed // 60)  # 1 –µ–Ω–µ—Ä–≥—ñ—è –∑–∞ 1 —Ö–≤–∏–ª–∏–Ω—É
    if energy_gain > 0:
        user['energy'] = min(MAX_ENERGY, user.get('energy', MAX_ENERGY) + energy_gain)
        user['energy_last_update'] = now

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def init_user(users, user_id, username):
    if user_id not in users:
        users[user_id] = {
            'username': username,
            'coins': 100,
            'xp': 0,
            'energy': MAX_ENERGY,
            'energy_last_update': time.time(),
            'guild': None,
            'rzhomb': 1,
            'bans': 0,
            'last_feed': 0,
            'active_quest': None,
            'last_daily': 0
        }

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = load_data(USERS_FILE)
    user_id = str(update.effective_user.id)
    username = update.effective_user.first_name or update.effective_user.username or "–ì—Ä–∞–≤–µ—Ü—å"
    init_user(users, user_id, username)
    save_data(USERS_FILE, users)
    await update.message.reply_text(f"–ü—Ä–∏–≤—ñ—Ç, {username}! –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –≤ –±–æ—Ç–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /help –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥.")

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üìú *–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:*\n"
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/profile - üë§ –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å\n"
        "/daily - üéÅ –û—Ç—Ä–∏–º–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å\n"
        "/feed - üçñ –ü–æ–≥–æ–¥—É–≤–∞—Ç–∏ –†–∂–æ–º–±—É (–æ—Ç—Ä–∏–º–∞—Ç–∏ –º–æ–Ω–µ—Ç–∏, –µ–Ω–µ—Ä–≥—ñ—é, XP)\n"
        "/createguild [–Ω–∞–∑–≤–∞] - üè∞ –°—Ç–≤–æ—Ä–∏—Ç–∏ –≥—ñ–ª—å–¥—ñ—é (1000 –º–æ–Ω–µ—Ç)\n"
        "/joinguild [–Ω–∞–∑–≤–∞] - ü§ù –í—Å—Ç—É–ø–∏—Ç–∏ –¥–æ –≥—ñ–ª—å–¥—ñ—ó\n"
        "/leaveguild - üö™ –í–∏–π—Ç–∏ –∑ –≥—ñ–ª—å–¥—ñ—ó\n"
        "/guild - üõ°Ô∏è –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≥—ñ–ª—å–¥—ñ—é\n"
        "/guildtop - üèÜ –¢–æ–ø –≥—ñ–ª—å–¥—ñ–π\n"
        "/quests - üìú –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–≤–µ—Å—Ç–∏\n"
        "/completequest - ‚úÖ –í–∏–∫–æ–Ω–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–≤–µ—Å—Ç\n"
        "/duel - ‚öîÔ∏è –ü–æ—á–∞—Ç–∏ –¥—É–µ–ª—å (–ø–ª–∞–Ω—É—î—Ç—å—Å—è)\n"
        "/shop - üõí –ú–∞–≥–∞–∑–∏–Ω (–ø–ª–∞–Ω—É—î—Ç—å—Å—è)\n"
        "/achievements - üèÖ –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è (—Å–∫–æ—Ä–æ)"
    )
    await update.message.reply_text(text, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /profile
async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = load_data(USERS_FILE)
    user_id = str(update.effective_user.id)
    if user_id not in users:
        await update.message.reply_text("‚ùó –°–ø–µ—Ä—à—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π /start")
        return
    user = users[user_id]
    text = (
        f"üë§ *–ü—Ä–æ—Ñ—ñ–ª—å {user['username']}:*\n"
        f"üí∞ –ú–æ–Ω–µ—Ç–∏: {user['coins']}\n"
        f"‚≠ê XP: {user['xp']}\n"
        f"‚ö° –ï–Ω–µ—Ä–≥—ñ—è: {user['energy']}/{MAX_ENERGY}\n"
        f"üè∞ –ì—ñ–ª—å–¥—ñ—è: {user['guild'] or '–Ω–µ–º–∞—î'}\n"
        f"üêâ –†–∂–æ–º–±–∞ —Ä—ñ–≤–µ–Ω—å: {user['rzhomb']}"
    )
    await update.message.reply_text(text, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /daily
async def daily(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = load_data(USERS_FILE)
    user_id = str(update.effective_user.id)
    if user_id not in users:
        await update.message.reply_text("‚ùó –°–ø–µ—Ä—à—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π /start")
        return
    user = users[user_id]
    now = time.time()
    last_daily = user.get('last_daily', 0)
    if now - last_daily < 86400:
        await update.message.reply_text("‚åõ –©–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å —É–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–æ. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    bonus_coins = 100
    user['coins'] += bonus_coins
    user['last_daily'] = now
    save_data(USERS_FILE, users)
    await update.message.reply_text(f"üéâ –¢–∏ –æ—Ç—Ä–∏–º–∞–≤ —â–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å: +{bonus_coins} –º–æ–Ω–µ—Ç!")

# –ö–æ–º–∞–Ω–¥–∞ /feed
async def feed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = load_data(USERS_FILE)
    user_id = str(update.effective_user.id)
    if user_id not in users:
        await update.message.reply_text("‚ùó –°–ø–µ—Ä—à—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π /start")
        return

    user = users[user_id]
    update_energy(user)
    now = time.time()

    feed_amount = FEED_COINS_BASE + (user['rzhomb'] * 5)

    user['coins'] += feed_amount
    user['energy'] = min(MAX_ENERGY, user.get('energy', 0) + 10)  # +10 –µ–Ω–µ—Ä–≥—ñ—ó
    user['xp'] += XP_PER_FEED
    user['last_feed'] = now

    save_data(USERS_FILE, users)

    await update.message.reply_text(
        f"üçñ –¢–∏ –ø–æ–≥–æ–¥—É–≤–∞–≤ –†–∂–æ–º–±—É —ñ –æ—Ç—Ä–∏–º–∞–≤ {feed_amount} –º–æ–Ω–µ—Ç! +{XP_PER_FEED} XP, +10 –µ–Ω–µ—Ä–≥—ñ—ó.\n"
        f"üí∞ –ú–æ–Ω–µ—Ç –∑–∞—Ä–∞–∑: {user['coins']}, ‚ö° –ï–Ω–µ—Ä–≥—ñ—è: {user['energy']}/{MAX_ENERGY}."
    )

# –ö–æ–º–∞–Ω–¥–∞ /createguild
async def create_guild(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = load_data(USERS_FILE)
    guilds = load_data(GUILDS_FILE)
    user_id = str(update.effective_user.id)
    if user_id not in users:
        await update.message.reply_text("‚ùó –°–ø–µ—Ä—à—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π /start")
        return

    user = users[user_id]

    if user['guild'] is not None:
        await update.message.reply_text("‚ùå –¢–∏ –≤–∂–µ –≤ –≥—ñ–ª—å–¥—ñ—ó.")
        return

    if user['coins'] < GUILD_CREATION_COST:
        await update.message.reply_text(f"‚ùå –î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—ñ–ª—å–¥—ñ—ó –ø–æ—Ç—Ä—ñ–±–Ω–æ {GUILD_CREATION_COST} –º–æ–Ω–µ—Ç.")
        return

    args = context.args
    if not args:
        await update.message.reply_text("‚ö†Ô∏è –í–∫–∞–∂–∏ –Ω–∞–∑–≤—É –≥—ñ–ª—å–¥—ñ—ó: /createguild –ù–∞–∑–≤–∞")
        return

    guild_name = " ".join(args).strip()

    if guild_name in guilds:
        await update.message.reply_text("‚ùå –ì—ñ–ª—å–¥—ñ—è –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î.")
        return

    guilds[guild_name] = {
        'owner': user_id,
        'members': [user_id],
        'level': 1,
        'xp': 0,
        'closed': False,
        'join_requests': []
    }

    user['guild'] = guild_name
    user['coins'] -= GUILD_CREATION_COST

    save_data(USERS_FILE, users)
    save_data(GUILDS_FILE, guilds)

    await update.message.reply_text(f"üè∞ –ì—ñ–ª—å–¥—ñ—è '{guild_name}' —Å—Ç–≤–æ—Ä–µ–Ω–∞! –í—ñ–¥–Ω—è—Ç–æ {GUILD_CREATION_COST} –º–æ–Ω–µ—Ç.")

# –¢—É—Ç –¥–æ–¥–∞–π —ñ–Ω—à—ñ –∫–æ–º–∞–Ω–¥–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ /joinguild, /leaveguild, /guild, /guildtop, /quests, /completequest, /duel, /shop, /achievements...

async def joinguild(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ
    await update.message.reply_text("ü§ù –§—É–Ω–∫—Ü—ñ—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –≥—ñ–ª—å–¥—ñ—ó —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.")

async def leaveguild(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ
    await update.message.reply_text("üö™ –§—É–Ω–∫—Ü—ñ—è –≤–∏—Ö–æ–¥—É –∑ –≥—ñ–ª—å–¥—ñ—ó —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.")

async def guild(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ
    await update.message.reply_text("üõ°Ô∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≥—ñ–ª—å–¥—ñ—é –±—É–¥–µ —Ç—É—Ç –ø—ñ–∑–Ω—ñ—à–µ.")

async def guildtop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üèÜ –¢–æ–ø –≥—ñ–ª—å–¥—ñ–π —Å–∫–æ—Ä–æ –∑'—è–≤–∏—Ç—å—Å—è!")

async def quests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìú –°–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç—ñ–≤ —Å–∫–æ—Ä–æ –±—É–¥–µ.")

async def completequest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–≤–µ—Å—Ç—É –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.")

async def duel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚öîÔ∏è –î—É–µ–ª—ñ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ñ.")

async def shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üõí –ú–∞–≥–∞–∑–∏–Ω —Å–∫–æ—Ä–æ –≤—ñ–¥–∫—Ä–∏—î—Ç—å—Å—è.")

async def achievements(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üèÖ –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.")

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token("7957837080:AAH1O_tEfW9xC9jfUt2hRXILG-Z579_w7ig").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("profile", profile))
    app.add_handler(CommandHandler("daily", daily))
    app.add_handler(CommandHandler("feed", feed))
    app.add_handler(CommandHandler("createguild", create_guild))
    app.add_handler(CommandHandler("joinguild", joinguild))
    app.add_handler(CommandHandler("leaveguild", leaveguild))
    app.add_handler(CommandHandler("guild", guild))
    app.add_handler(CommandHandler("guildtop", guildtop))
    app.add_handler(CommandHandler("quests", quests))
    app.add_handler(CommandHandler("completequest", completequest))
    app.add_handler(CommandHandler("duel", duel))
    app.add_handler(CommandHandler("shop", shop))
    app.add_handler(CommandHandler("achievements", achievements))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()

if __name__ == '__main__':
    main()
