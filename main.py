from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from telegram import Update
import json
import time
import random

USERS_FILE = 'users.json'
GUILDS_FILE = 'guilds.json'

MAX_ENERGY = 100
FEED_COINS_BASE = 25
XP_PER_FEED = 10
GUILD_CREATION_COST = 1000
MAX_GUILD_MEMBERS = 20

# –ú–∞–≥–∞–∑–∏–Ω (–Ω–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ : {—Ü—ñ–Ω–∞, –∞—Ç–∞–∫–∞})
SHOP_ITEMS = {
    "–º–µ—á": {"price": 500, "attack": 5},
    "—Å–∞–±–ª—è": {"price": 800, "attack": 8},
    "–∞—Ä–±–∞–ª–µ—Ç": {"price": 1200, "attack": 12},
    "—â–∏—Ç": {"price": 700, "attack": 0},  # –¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ –∑–∞—Ö–∏—Å—Ç—É
}

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ñ–∞–π–ª–∞–º–∏ (–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è/–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è)
def load_data(filename):
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_data(filename, data):
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def update_energy(user):
    now = time.time()
    elapsed = now - user.get('energy_last_update', now)
    energy_gain = int(elapsed // 60)  # 1 –µ–Ω–µ—Ä–≥—ñ—è –∑–∞ 1 —Ö–≤–∏–ª–∏–Ω—É
    if energy_gain > 0:
        user['energy'] = min(MAX_ENERGY, user.get('energy', MAX_ENERGY) + energy_gain)
        user['energy_last_update'] = now

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def init_user(users, user_id, username):
    if user_id not in users:
        users[user_id] = {
            'username': username,
            'coins': 100,
            'xp': 0,
            'energy': MAX_ENERGY,
            'energy_last_update': time.time(),
            'guild': None,
            'rzhomb': 1,
            'bans': 0,
            'last_feed': 0,
            'active_quest': None,
            'last_daily': 0,
            'inventory': {},  # –ø—Ä–µ–¥–º–µ—Ç–∏ –≥—Ä–∞–≤—Ü—è
            'attack': 1  # –±–∞–∑–æ–≤–∞ –∞—Ç–∞–∫–∞
        }

# --- —Ç–≤–æ—ó —ñ—Å–Ω—É—é—á—ñ –∫–æ–º–∞–Ω–¥–∏ (start, help, profile, daily, feed, create_guild) ---

async def shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = load_data(USERS_FILE)
    user_id = str(update.effective_user.id)
    if user_id not in users:
        await update.message.reply_text("‚ùó –°–ø–µ—Ä—à—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π /start")
        return

    user = users[user_id]
    text = "üõí *–ú–∞–≥–∞–∑–∏–Ω –∑–±—Ä–æ—ó:*\n"
    for item, info in SHOP_ITEMS.items():
        text += f"{item.capitalize()}: {info['price']} –º–æ–Ω–µ—Ç, –∞—Ç–∞–∫–∞ +{info['attack']}\n"
    text += "\n–©–æ–± –∫—É–ø–∏—Ç–∏: /buy [–Ω–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞]"
    await update.message.reply_text(text, parse_mode='Markdown')

async def buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = load_data(USERS_FILE)
    user_id = str(update.effective_user.id)
    if user_id not in users:
        await update.message.reply_text("‚ùó –°–ø–µ—Ä—à—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π /start")
        return

    user = users[user_id]
    args = context.args
    if not args:
        await update.message.reply_text("‚ö†Ô∏è –í–∫–∞–∂–∏ –Ω–∞–∑–≤—É –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏: /buy [–Ω–∞–∑–≤–∞]")
        return

    item_name = args[0].lower()
    if item_name not in SHOP_ITEMS:
        await update.message.reply_text("‚ùå –¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ–º–∞—î –≤ –º–∞–≥–∞–∑–∏–Ω—ñ.")
        return

    item = SHOP_ITEMS[item_name]
    if user['coins'] < item['price']:
        await update.message.reply_text("‚ùå –£ —Ç–µ–±–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç.")
        return

    # –ö—É–ø—ñ–≤–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞
    user['coins'] -= item['price']
    user['inventory'][item_name] = user['inventory'].get(item_name, 0) + 1
    user['attack'] += item['attack']

    save_data(USERS_FILE, users)
    await update.message.reply_text(f"‚úÖ –¢–∏ –∫—É–ø–∏–≤ {item_name}! –¢–≤–æ—è –∞—Ç–∞–∫–∞ —Ç–µ–ø–µ—Ä {user['attack']}.")

# –î—É–µ–ª—å–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ (–ø–æ–∫–ª–∏–∫–∞–Ω–Ω—è –Ω–∞ –¥—É–µ–ª—å, –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, —ñ –±—ñ–π)
duel_requests = {}  # user_id: opponent_id

async def duel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = load_data(USERS_FILE)
    challenger_id = str(update.effective_user.id)
    if challenger_id not in users:
        await update.message.reply_text("‚ùó –°–ø–µ—Ä—à—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π /start")
        return

    args = context.args
    if not args:
        await update.message.reply_text("‚ö†Ô∏è –í–∫–∞–∂–∏ ID –æ–ø–æ–Ω–µ–Ω—Ç–∞: /duel [ID –≥—Ä–∞–≤—Ü—è]")
        return

    opponent_id = args[0]
    if opponent_id == challenger_id:
        await update.message.reply_text("‚ùå –ù–µ –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Å–µ–±–µ –Ω–∞ –¥—É–µ–ª—å.")
        return

    if opponent_id not in users:
        await update.message.reply_text("‚ùå –û–ø–æ–Ω–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
        return

    if challenger_id in duel_requests or opponent_id in duel_requests.values():
        await update.message.reply_text("‚åõ –•—Ç–æ—Å—å —ñ–∑ –≤–∞—Å –≤–∂–µ —É –ø—Ä–æ—Ü–µ—Å—ñ –¥—É–µ–ª—ñ.")
        return

    duel_requests[challenger_id] = opponent_id
    await update.message.reply_text(f"‚öîÔ∏è –¢–∏ –≤–∏–∫–ª–∏–∫–∞–≤ {users[opponent_id]['username']} –Ω–∞ –¥—É–µ–ª—å! –ß–µ–∫–∞—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è...")

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–ø–æ–Ω–µ–Ω—Ç—É –∑ –∫–Ω–æ–ø–∫–æ—é –ø—Ä–∏–π–Ω—è—Ç—Ç—è –¥—É–µ–ª—ñ (—Å–ø—Ä–æ—â–µ–Ω–æ)
    # –î–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω CallbackQueryHandler, –∞–ª–µ –¥–ª—è —Å–ø—Ä–æ—â–µ–Ω–Ω—è —Ç—É—Ç –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
    # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–ø–æ–Ω–µ–Ω—Ç –º–∞—î –Ω–∞–ø–∏—Å–∞—Ç–∏ /acceptduel [challenger_id] –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è

async def acceptduel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = load_data(USERS_FILE)
    opponent_id = str(update.effective_user.id)
    args = context.args
    if not args:
        await update.message.reply_text("‚ö†Ô∏è –í–∫–∞–∂–∏ ID —Ç–æ–≥–æ, —Ö—Ç–æ —Ç–µ–±–µ –≤–∏–∫–ª–∏–∫–∞–≤: /acceptduel [ID]")
        return

    challenger_id = args[0]
    if challenger_id not in duel_requests or duel_requests[challenger_id] != opponent_id:
        await update.message.reply_text("‚ùå –ù–µ–º–∞—î –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–∞ –¥—É–µ–ª—å –≤—ñ–¥ —Ü—å–æ–≥–æ –≥—Ä–∞–≤—Ü—è.")
        return

    # –ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –¥—É–µ–ª—ñ
    challenger = users[challenger_id]
    opponent = users[opponent_id]

    # –ü—Ä–æ—Å—Ç–æ –ø–æ—Ä—ñ–≤–Ω—é—î–º–æ –∞—Ç–∞–∫—É + –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ–∞–∫—Ç–æ—Ä
    challenger_power = challenger.get('attack', 1) + random.randint(0, 5)
    opponent_power = opponent.get('attack', 1) + random.randint(0, 5)

    if challenger_power > opponent_power:
        winner_id, loser_id = challenger_id, opponent_id
    elif opponent_power > challenger_power:
        winner_id, loser_id = opponent_id, challenger_id
    else:
        winner_id = loser_id = None  # –Ω—ñ—á–∏—ó

    if winner_id:
        users[winner_id]['coins'] += 100
        users[loser_id]['coins'] = max(0, users[loser_id]['coins'] - 50)
        result_text = (f"üèÜ –í–∏–≥—Ä–∞–≤ {users[winner_id]['username']}!\n"
                       f"–í–∏–≥—Ä–∞—à: +100 –º–æ–Ω–µ—Ç\n"
                       f"–ü—Ä–æ–≥—Ä–∞—à: -50 –º–æ–Ω–µ—Ç")
    else:
        result_text = "ü§ù –î—É–µ–ª—å –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å –Ω—ñ—á–∏—î—é!"

    # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Ç
    duel_requests.pop(challenger_id, None)

    save_data(USERS_FILE, users)
    await update.message.reply_text(result_text)

# --- —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ ---

def main():
    app = ApplicationBuilder().token("–¢–í–û–ô_–¢–û–ö–ï–ù").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("profile", profile))
    app.add_handler(CommandHandler("daily", daily))
    app.add_handler(CommandHandler("feed", feed))
    app.add_handler(CommandHandler("createguild", create_guild))
    app.add_handler(CommandHandler("joinguild", joinguild))
    app.add_handler(CommandHandler("leaveguild", leaveguild))
    app.add_handler(CommandHandler("guild", guild))
    app.add_handler(CommandHandler("guildtop", guildtop))
    app.add_handler(CommandHandler("quests", quests))
    app.add_handler(CommandHandler("completequest", completequest))
    app.add_handler(CommandHandler("duel", duel))
    app.add_handler(CommandHandler("acceptduel", acceptduel))  # –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥—É–µ–ª—ñ
    app.add_handler(CommandHandler("shop", shop))
    app.add_handler(CommandHandler("buy", buy))
    app.add_handler(CommandHandler("achievements", achievements))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()

if __name__ == '__main__':
    main()
