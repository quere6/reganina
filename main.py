import json
import time
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

USERS_FILE = 'users.json'
GUILDS_FILE = 'guilds.json'

MAX_ENERGY = 100
FEED_COINS_BASE = 25
XP_PER_FEED = 10
GUILD_CREATION_COST = 1000
MAX_GUILD_MEMBERS = 20  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤ –≥—ñ–ª—å–¥—ñ—ó

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
def load_data(filename):
    try:
        with open(filename, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_data(filename, data):
    with open(filename, 'w') as f:
        json.dump(data, f, indent=4)

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def update_energy(user):
    now = time.time()
    elapsed = now - user.get('energy_last_update', now)
    energy_gain = int(elapsed // 60)  # 1 –µ–Ω–µ—Ä–≥—ñ—è –∑–∞ 1 —Ö–≤–∏–ª–∏–Ω—É
    if energy_gain > 0:
        user['energy'] = min(MAX_ENERGY, user.get('energy', MAX_ENERGY) + energy_gain)
        user['energy_last_update'] = now

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ
def init_user(users, user_id, first_name):
    if user_id not in users:
        users[user_id] = {
            'username': first_name,  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π –Ω—ñ–∫ (—ñ–º'—è), –Ω–µ @username
            'coins': 100,
            'xp': 0,
            'energy': MAX_ENERGY,
            'energy_last_update': time.time(),
            'guild': None,
            'rzhomb': 1,
            'bans': 0,
            'last_feed': 0,
            'active_quest': None
        }

# --- –ö–û–ú–ê–ù–î–ò ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = load_data(USERS_FILE)
    user_id = str(update.effective_user.id)
    first_name = update.effective_user.first_name or "–ì—Ä–∞–≤–µ—Ü—å"
    init_user(users, user_id, first_name)
    save_data(USERS_FILE, users)
    await update.message.reply_text(f"üëã –í—ñ—Ç–∞—é, {first_name}! –¢–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /help –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = load_data(USERS_FILE)
    user_id = str(update.effective_user.id)
    if user_id not in users:
        await update.message.reply_text("‚ö†Ô∏è –°–ø–µ—Ä—à—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π /start")
        return
    text = (
        "üìú –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
        "/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/profile - üë§ –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å\n"
        "/daily - üéÅ –û—Ç—Ä–∏–º–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å\n"
        "/feed - üçñ –ü–æ–≥–æ–¥—É–≤–∞—Ç–∏ –†–∂–æ–º–±—É (–æ—Ç—Ä–∏–º–∞—Ç–∏ –º–æ–Ω–µ—Ç–∏, –µ–Ω–µ—Ä–≥—ñ—é, XP)\n"
        "/createguild [–Ω–∞–∑–≤–∞] - üõ° –°—Ç–≤–æ—Ä–∏—Ç–∏ –≥—ñ–ª—å–¥—ñ—é (1000 –º–æ–Ω–µ—Ç)\n"
        "/joinguild [–Ω–∞–∑–≤–∞] - üö™ –í—Å—Ç—É–ø–∏—Ç–∏ –¥–æ –≥—ñ–ª—å–¥—ñ—ó\n"
        "/leaveguild - üö™ –í–∏–π—Ç–∏ –∑ –≥—ñ–ª—å–¥—ñ—ó\n"
        "/guild - üè∞ –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≥—ñ–ª—å–¥—ñ—é\n"
        "/guildtop - üèÜ –¢–æ–ø –≥—ñ–ª—å–¥—ñ–π\n"
        "/quests - üìñ –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–≤–µ—Å—Ç–∏\n"
        "/completequest - ‚úÖ –í–∏–∫–æ–Ω–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–≤–µ—Å—Ç\n"
        "/duel - ‚öîÔ∏è –ü–æ—á–∞—Ç–∏ –¥—É–µ–ª—å (–ø–ª–∞–Ω—É—î—Ç—å—Å—è)\n"
        "/shop - üõí –ú–∞–≥–∞–∑–∏–Ω (–ø–ª–∞–Ω—É—î—Ç—å—Å—è)\n"
        "/achievements - üèÖ –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è (—Å–∫–æ—Ä–æ)"
    )
    await update.message.reply_text(text)

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = load_data(USERS_FILE)
    user_id = str(update.effective_user.id)
    if user_id not in users:
        await update.message.reply_text("‚ö†Ô∏è –°–ø–µ—Ä—à—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π /start")
        return
    user = users[user_id]
    text = (
        f"üë§ –ü—Ä–æ—Ñ—ñ–ª—å {user['username']}:\n"
        f"üí∞ –ú–æ–Ω–µ—Ç–∏: {user['coins']}\n"
        f"‚≠ê XP: {user['xp']}\n"
        f"üîã –ï–Ω–µ—Ä–≥—ñ—è: {user['energy']}/{MAX_ENERGY}\n"
        f"üè∞ –ì—ñ–ª—å–¥—ñ—è: {user['guild'] or '–Ω–µ–º–∞—î'}\n"
        f"üêæ –†–∂–æ–º–±–∞ —Ä—ñ–≤–µ–Ω—å: {user['rzhomb']}"
    )
    await update.message.reply_text(text)

async def daily(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = load_data(USERS_FILE)
    user_id = str(update.effective_user.id)
    if user_id not in users:
        await update.message.reply_text("‚ö†Ô∏è –°–ø–µ—Ä—à—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π /start")
        return
    user = users[user_id]
    now = time.time()

    last_daily = user.get('last_daily', 0)
    if now - last_daily < 86400:  # 24 –≥–æ–¥–∏–Ω–∏
        await update.message.reply_text("‚è≥ –©–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å —É–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–æ. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    bonus_coins = 100
    user['coins'] += bonus_coins
    user['last_daily'] = now

    save_data(USERS_FILE, users)
    await update.message.reply_text(f"üéâ –¢–∏ –æ—Ç—Ä–∏–º–∞–≤ —â–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å: {bonus_coins} –º–æ–Ω–µ—Ç!")

async def feed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = load_data(USERS_FILE)
    user_id = str(update.effective_user.id)
    if user_id not in users:
        await update.message.reply_text("‚ö†Ô∏è –°–ø–µ—Ä—à—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π /start")
        return

    user = users[user_id]
    update_energy(user)
    now = time.time()

    feed_amount = FEED_COINS_BASE + (user['rzhomb'] * 5)

    # –ó–∞–º—ñ—Å—Ç—å –∑–Ω—ñ–º–∞–Ω–Ω—è –º–æ–Ω–µ—Ç ‚Äî –¥–æ–¥–∞—î–º–æ –º–æ–Ω–µ—Ç–∏
    user['coins'] += feed_amount
    user['energy'] = min(MAX_ENERGY, user.get('energy', 0) + 10)  # +10 –µ–Ω–µ—Ä–≥—ñ—ó
    user['xp'] += XP_PER_FEED
    user['last_feed'] = now

    save_data(USERS_FILE, users)

    await update.message.reply_text(
        f"üçñ –¢–∏ –ø–æ–≥–æ–¥—É–≤–∞–≤ —Ä–∂–æ–º–±—É —Ç–∞ –æ—Ç—Ä–∏–º–∞–≤ {feed_amount} –º–æ–Ω–µ—Ç! +{XP_PER_FEED} XP, +10 –µ–Ω–µ—Ä–≥—ñ—ó.\n"
        f"üí∞ –ú–æ–Ω–µ—Ç –∑–∞—Ä–∞–∑: {user['coins']}, –µ–Ω–µ—Ä–≥—ñ—è: {user['energy']}/{MAX_ENERGY}."
    )

async def create_guild(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = load_data(USERS_FILE)
    guilds = load_data(GUILDS_FILE)
    user_id = str(update.effective_user.id)
    if user_id not in users:
        await update.message.reply_text("‚ö†Ô∏è –°–ø–µ—Ä—à—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π /start")
        return

    user = users[user_id]

    if user['guild'] is not None:
        await update.message.reply_text("‚ö†Ô∏è –¢–∏ –≤–∂–µ –≤ –≥—ñ–ª—å–¥—ñ—ó.")
        return

    if user['coins'] < GUILD_CREATION_COST:
        await update.message.reply_text(f"‚ö†Ô∏è –î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—ñ–ª—å–¥—ñ—ó –ø–æ—Ç—Ä—ñ–±–Ω–æ {GUILD_CREATION_COST} –º–æ–Ω–µ—Ç.")
        return

    args = context.args
    if not args:
        await update.message.reply_text("‚ö†Ô∏è –í–∫–∞–∂–∏ –Ω–∞–∑–≤—É –≥—ñ–ª—å–¥—ñ—ó —ñ —Ç–∏–ø (–≤—ñ–¥–∫—Ä–∏—Ç–∞ –∞–±–æ –∑–∞–∫—Ä–∏—Ç–∞): /createguild –ù–∞–∑–≤–∞ [–≤—ñ–¥–∫—Ä–∏—Ç–∞|–∑–∞–∫—Ä–∏—Ç–∞]")
        return

    guild_name = args[0].strip()
    guild_type = "–≤—ñ–¥–∫—Ä–∏—Ç–∞"
    if len(args) > 1:
        if args[1].lower() in ("–≤—ñ–¥–∫—Ä–∏—Ç–∞", "–∑–∞–∫—Ä–∏—Ç–∞"):
            guild_type = args[1].lower()

    if guild_name in guilds:
        await update.message.reply_text("‚ö†Ô∏è –ì—ñ–ª—å–¥—ñ—è –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î.")
        return

    guilds[guild_name] = {
        'owner': user_id,
        'members': [user_id],
        'level': 1,
        'xp': 0,
        'type
