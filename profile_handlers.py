import json
import os
import re
from datetime import datetime
from collections import defaultdict
from difflib import SequenceMatcher
from telegram import Update
from telegram.ext import ContextTypes

DATA_FILE = "users.json"
DAILY_FILE = "daily.json"

PHRASES = {
    "—Ä–∂–æ–º–±–∞": "ü§£",
    "–Ω—É —Ç–∏ —Ç–∞–º –¥–µ—Ä–∂–∏—Å—å": "–°—Å–∏–∫–ª–æ",
    "–∞ –≤–æ–Ω–æ –º–µ–Ω—ñ –Ω–µ –Ω–∞–¥–∞": "–ù–µ –º—É–∂–∏–∫",
    "–Ω–∞—à –∂–∏–≤—á–∏–∫": "–ú—ñ—Å—Ç–µ—Ä –ë—ñ—Å—Ç",
    "—Å—ñ–≥–º–∞ –±–æ–π": "–ë–æ–≥–¥–∞–Ω",
}

SPAM_LIMIT = 150
TIME_WINDOW = 300
energy_max = 100
energy_recover_period = 5  # —Ö–≤–∏–ª–∏–Ω–∏
daily_base = 50

profiles = {}
daily = {}
user_messages = defaultdict(list)

def load_json(path, default):
    if os.path.exists(path):
        with open(path, "r") as f:
            return json.load(f)
    return default

def save_json(path, data):
    with open(path, "w") as f:
        json.dump(data, f, indent=2)

async def save_data():
    save_json(DATA_FILE, profiles)
    save_json(DAILY_FILE, daily)

def normalize(text):
    return re.sub(r"[^\w\s]", "", text.lower()).strip()

def similar(text):
    for phrase in PHRASES:
        if SequenceMatcher(None, text, phrase).ratio() > 0.7:
            return True
    return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global profiles, daily
    profiles = load_json(DATA_FILE, {})
    daily = load_json(DAILY_FILE, {})
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø –†–∂–æ–º–±–∞ –ë–æ—Ç ü§ñ")

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    commands = [
        "/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º",
        "/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
        "/profile - –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å",
        "/daily - –û—Ç—Ä–∏–º–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å",
        "/shop - –ú–∞–≥–∞–∑–∏–Ω (–ø–ª–∞–Ω—É—î—Ç—å—Å—è)",
        "/duel - –ü–æ—á–∞—Ç–∏ –¥—É–µ–ª—å (–ø–ª–∞–Ω—É—î—Ç—å—Å—è)",
        "/words - –ü–æ–∫–∞–∑–∞—Ç–∏ —É–ª—é–±–ª–µ–Ω—ñ —Å–ª–æ–≤–∞ (–ø–ª–∞–Ω—É—î—Ç—å—Å—è)"
    ]
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∏:\n" + "\n".join(commands))

async def profile_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    p = profiles.get(uid, {
        "username": update.effective_user.username or f"user{uid}",
        "rzhomb": 0,
        "coins": 0,
        "bans": 0,
        "favorite_phrase": "–†–∂–æ–º–±–∞",
        "energy": energy_max,
        "energy_last_update": datetime.now().timestamp()
    })
    text = (
        f"üë§ –ü—Ä–æ—Ñ—ñ–ª—å @{p.get('username')}\n"
        f"üí¨ –£–ª—é–±–ª–µ–Ω–∞ —Ñ—Ä–∞–∑–∞: {p.get('favorite_phrase')}\n"
        f"üìä –†–∂–æ–º–±–æ–º–µ—Ç—Ä: {p.get('rzhomb')}\n"
        f"ü™ô –ú–æ–Ω–µ—Ç–∏: {p.get('coins')}\n"
        f"üö´ –ó–∞–±–∞–Ω–µ–Ω–∏–π —Ä–∞–∑—ñ–≤: {p.get('bans')}\n"
        f"‚ö° –ï–Ω–µ—Ä–≥—ñ—è: {p.get('energy')}/{energy_max}"
    )
    await update.message.reply_text(text)

async def daily_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global daily, profiles
    uid = str(update.effective_user.id)
    now = int(datetime.now().timestamp())
    last = daily.get(uid, 0)
    if now - last < 86400:
        await update.message.reply_text("–°—å–æ–≥–æ–¥–Ω—ñ —Ç–∏ –≤–∂–µ –æ—Ç—Ä–∏–º—É–≤–∞–≤.")
        return
    award = daily_base
    profiles.setdefault(uid, {}).setdefault("coins", 0)
    profiles[uid]["coins"] += award
    daily[uid] = now
    await save_data()
    await update.message.reply_text(f"–¢—Ä–∏–º–∞–π {award} –º–æ–Ω–µ—Ç!")

async def reply_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global profiles, user_messages
    now = datetime.now()
    uid = update.effective_user.id
    uname = update.effective_user.username or f"user{uid}"
    text = update.message.text or ""
    profile = profiles.setdefault(str(uid), {
        "username": uname,
        "rzhomb": 0,
        "coins": 0,
        "energy": energy_max,
        "energy_last_update": now.timestamp(),
        "bans": 0,
        "favorite_phrase": "–†–∂–æ–º–±–∞"
    })

    # –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–Ω–µ—Ä–≥—ñ—ó
    last = datetime.fromtimestamp(profile['energy_last_update'])
    recovered = (now - last).seconds // energy_recover_period
    if recovered > 0:
        profile['energy'] = min(energy_max, profile['energy'] + recovered)
        profile['energy_last_update'] = now.timestamp()

    # –°–ø–∞–º-—Ñ—ñ–ª—å—Ç—Ä
    user_messages[uid].append(now)
    user_messages[uid] = [t for t in user_messages[uid] if (now - t).seconds < TIME_WINDOW]
    if len(user_messages[uid]) > SPAM_LIMIT:
        return

    # –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    norm = normalize(text)
    cnt = text.lower().count("—Ä–∂–æ–º–±–∞")
    if cnt > 0 and profile["energy"] >= cnt:
        profile["rzhomb"] += cnt
        profile["coins"] += cnt * 2
        profile["energy"] -= cnt
        await update.message.reply_text(f"–†–∂–æ–º–±–∞! +{cnt*2} –º–æ–Ω–µ—Ç")
    elif norm in PHRASES:
        await update.message.reply_text(PHRASES[norm])
    elif similar(norm):
        await update.message.reply_text("–¢–∏ –º–∞–∑–∏–ª–∞")
    else:
        await update.message.reply_text("–†–∂–æ–º–±–∞")

    await save_data()
